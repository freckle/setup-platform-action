name: Platform setup
description: Install and configure PlatformCLI and Stackctl

inputs:
  version:
    description: Version of Platform CLI to install
    required: true
    default: "2.4.1.0"

  token:
    description: GitHub Token with access to freckle/platform repository
    required: true

  environment:
    description: Value to set as PLATFORM_ENVIRONMENT
    required: true
    default: ""

  app:
    description: Value to set as PLATFORM_APP
    required: true
    default: ""

  resource:
    description: Value to set as PLATFORM_RESOURCE
    required: true
    default: ""

  no-validate:
    description: Value to set as PLATFORM_NO_VALIDATE
    required: true
    default: ""

  stackctl-version:
    description: Stackctl version to install
    required: true
    default: "1.3.0.0"

outputs:
  tag:
    value: ${{ steps.set-tag.outputs.tag }}
  cache:
    value: ${{ steps.set-cache.outputs.cache }}

runs:
  using: composite
  steps:
    - if: ${{ runner.os == 'macOS' }}
      name: Replace BSD install with GNU install
      shell: bash
      run: |
        brew install coreutils
        sudo mkdir -p /usr/local/bin
        sudo ln -sf "$(which ginstall)" /usr/local/bin/install
        install --version | grep -Fq GNU

    - name: Install PlatformCLI
      uses: pbrisbin/setup-tool-action@v1
      with:
        name: platform
        version: ${{ inputs.version }}
        url: "https://github.com/freckle/{name}/releases/download/v{version}/{name}-{arch}-{os}.{ext}"
        github-token: ${{ inputs.token }}
        arch: x86_64
        os-darwin: osx
        subdir: "{name}"

    - name: Install Stackctl
      uses: pbrisbin/setup-tool-action@v1
      with:
        name: stackctl
        version: ${{ inputs.stackctl-version }}
        url: "https://github.com/freckle/{name}/releases/download/v{version}/{name}-{arch}-{os}.{ext}"
        arch: x86_64
        os-darwin: osx
        subdir: "{name}"

    - name: Configure PlatformCLI and Stackctl ENV
      shell: bash
      run: |
        {
          echo 'LOG_COLOR=always'
          echo 'LOG_DESTINATION=stderr'
          echo 'STACKCTL_DIRECTORY=.platform/specs'

          if [[ -n "${{ inputs.app }}" ]]; then
            echo 'PLATFORM_APP=${{ inputs.app }}'
          fi

          if [[ -n "${{ inputs.environment }}" ]]; then
            echo 'PLATFORM_ENVIRONMENT=${{ inputs.environment }}'
          fi

          if [[ -n "${{ inputs.resource }}" ]]; then
            echo 'PLATFORM_RESOURCE=${{ inputs.resource }}'
          fi

          if [[ -n "${{ inputs.no-validate }}" ]]; then
            echo 'PLATFORM_NO_VALIDATE=${{ inputs.no-validate }}'
          fi

        } >>"$GITHUB_ENV"

    # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request
    #
    # > Note that GITHUB_SHA for [the pull] event is the last merge commit of
    # > the pull request merge branch. If you want to get the commit ID for the
    # > last commit to the head branch of the pull request, use
    # > github.event.pull_request.head.sha instead.
    #
    - id: set-tag
      name: Set tag output
      shell: bash
      run: |
        tag=${{ github.event.pull_request.head.sha }}
        tag=${tag:-${{ github.event.push.after }}}
        tag=${tag:-${{ github.sha }}}
        echo "tag=$tag" >>"$GITHUB_OUTPUT"

    - id: set-cache
      name: Set cache ouput
      shell: bash
      run: |
        app=${{ inputs.app }}
        app=${app:-.}
        echo "cache=$app/.platform/cache" >>"$GITHUB_OUTPUT"

    - name: Cache .platform/cache directory
      uses: actions/cache@v3
      with:
        path: ${{ steps.set-cache.outputs.cache }}
        key: ${{ runner.os }}-${{ github.job }}-${{ steps.set-tag.outputs.tag }}
        restore-keys: |
          ${{ runner.os }}-${{ github.job }}-
